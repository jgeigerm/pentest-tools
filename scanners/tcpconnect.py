#!/usr/bin/python
import socket
import argparse
import sys

def main():
    #parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-hA", help="high address", action='store', dest='hadd', required=True)
    parser.add_argument("-lA", help="low address", action='store', dest='ladd', required=True)
    parser.add_argument("-hP", help="high port", action='store', dest='hport', required=True)
    parser.add_argument("-lP", help="low port", action='store', dest='lport', required=True)
    parser.add_argument("-n", help="slash 24 network id (ex. 192.168.1.0)", action='store', dest='network', required=True)
    parser.add_argument("-s", help="slower scan, set timeout to .1s on -s or 1s on -ss", action='count', dest='slow')
    args = parser.parse_args()

    #Extract first 3 octets
    if len(args.network.split(".")) != 4:
        parser.print_usage()
        print("{}: error: Network id must be in the form 192.168.1.0".format(sys.argv[0]))
        return 1
    networkid = ".".join(args.network.split(".")[:-1])

    #set timeout
    timeout = .01
    if args.slow == 1:
        timeout = .1
    elif args.slow == 2:
        timeout = 1


    #scan all hosts in range
    for host in range(int(args.ladd), int(args.hadd)+1):
        ip = "{}.{}".format(networkid, host)
        #scan all ports in range
        for port in range(int(args.lport), int(args.hport)+1):
            #create a TCP socket, set timeout to 2 seconds
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(timeout)
            try:
                #try to connect, on success print that the port is open
                s.connect((ip, port))
                print("port {} is open on {}".format(port, ip))
            #if the port is closed then an exception will be thrown so just keep going
            except Exception as e:
                if isinstance(e, KeyboardInterrupt):
                    sys.exit(1)
                pass
            #close the socket before starting a new one
            s.close()

if __name__ == "__main__":
    sys.exit(main())
